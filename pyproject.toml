##
# Project settings
##

[project]

name = "ranger-transmissions"
dynamic = ["version"]
description = "Ranger radio transmissions viewer"
readme = "README.rst"
license = {file = "LICENSE.txt"}

# Requirements
requires-python = ">=3.12"
dependencies = [
    "arrow==1.3.0",
    "attrs==24.3.0",
    "cattrs==24.1.2",
    "click==8.1.8",
    "klein==24.8.0",
    "openai-whisper==20240930; sys_platform!='darwin' or platform_machine!='x86_64'",
    "pydub==0.25.1",
    "pyobjc==10.3.2; sys_platform=='darwin'",
    "rich==13.9.4",
    "simpleaudio==1.0.4; sys_platform=='darwin'",
    "textual==0.85.2",
    "Twisted==24.11.0",
    "Whoosh==2.7.4",
]

# Authors/maintainers
authors = [
    {name="Wilfredo SÃ¡nchez Vega", email="tool@burningman.org"},
]
maintainers = [
  {name = "Burning Man Project, Black Rock Rangers", email = "ranger-tech-ninjas@burningman.org"},
]

# Search metadata
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
]
keywords = []

[project.scripts]
rtx = "transmissions.run:Command.main"

[project.urls]
Homepage = "https://github.com/burningmantech/ranger-transmissions"
#Documentation = ""
Repository = "https://github.com/burningmantech/ranger-transmissions.git"
Issues = "https://github.com/burningmantech/ranger-transmissions/issues"
Changelog = "https://github.com/burningmantech/ranger-transmissions/blob/master/CHANGELOG.md"

[build-system]

requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"


##
# Ruff
##

[tool.ruff.format]

# skip-magic-trailing-comma = true


[tool.ruff.lint]

select = ["ALL"]
ignore = [
    "A001",     # Variable `min` is shadowing a Python builtin
    "A002",     # Function argument is shadowing a Python builtin
    "A004",     # Import is shadowing a Python builtin
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "ARG002",   # Unused method argument
    "B008",     # Do not perform function call in argument defaults
    "C901",     # is too complex
    "COM812",   # Trailing comma missing
    "D105",     # Missing docstring in magic method
    "D200",     # One-line docstring should fit on one line
    "D202",     # No blank lines allowed after function docstring
    "D203",     # Use a blank line to separate the docstring from the class definition
    "D205",     # 1 blank line required between summary line and description
    "D212",     # Multi-line docstring summary should start at the first line
    "D213",     # Multi-line docstring summary should start at the second line
    "D400",     # First line should end with a period
    "D401",     # First line of docstring should be in imperative mood
    "D415",     # First line should end with a period, question mark, or exclamation point
    "DTZ001",   # `datetime.datetime()` called without a `tzinfo` argument
    "DTZ005",   # `datetime.datetime.now()` called without a `tz` argument
    "EM101",    # Exception must not use a string literal, assign to variable first
    "EM102",    # Exception must not use an f-string literal, assign to variable first
    "ERA001",   # Found commented-out code
    "FIX001",   # Line contains FIXME, consider resolving the issue
    "ISC001",   # Implicitly concatenated strings on a single line  # Disabled for formatter compatibility
    "N802",     # Function name should be lowercase
    "N803",     # Argument name should be lowercase
    "N806",     # Variable in function should be lowercase
    "N812",     # Lowercase imported as non-lowercase
    "N815",     # Variable in class scope should not be mixedCase
    "N816",     # Variable in global scope should not be mixedCase
    "PIE796",   # Enum contains duplicate value: `str`
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0915",  # Too many statements
    "PT",       # We don't use pytest
    "RSE102",   # Unnecessary parentheses on raised exception
    "S101",     # Use of `assert` detected
    "S608",     # Possible SQL injection vector through string-based query construction
    "SIM108",   # Use ternary operator
    "SIM118",   # Use `key in dict` instead of `key in dict.keys()`
    "TD001",    # Invalid TODO tag: `FIXME`
    "TD002",    # Missing author in TODO
    "TD003",    # Missing issue link on the line following this TODO
    "TRY003",   # Avoid specifying long messages outside the exception class
    "TRY301",   # Abstract `raise` to an inner function
    "TRY400",   # Use `logging.exception` instead of `logging.error`

    # Reconsider
    "TID252",   # Prefer absolute imports over relative imports from parent modules

    # TODO
    "FBT001",   # Boolean-typed positional argument in function definition
    "FBT002",   # Boolean default positional argument in function definition
    "FBT003",   # Boolean positional value in function call
    "SLF001",   # Private member accessed
]

[tool.ruff.lint.isort]

lines-after-imports = 2


##
# Setuptools
##

[tool.setuptools.dynamic]
version = {attr = "transmissions.__version__"}

[tool.setuptools.packages.find]
where = ["src"]


##
# uv
##

[tool.uv]

default-groups = []
[dependency-groups]
lint = [
    "pre-commit==4.0.1",
]
unit = [
    "coverage==7.6.10",
    "hypothesis==6.112.4",
]
mypy = [
    "mypy-zope==1.0.5",
    "mypy==1.7.1",
    "pydub-stubs==0.25.1.1",
]
packaging = [
    "pip",
    "twine==5.1.1",
]
